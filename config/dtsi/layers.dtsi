/* Layers */

ZMK_CONDITIONAL_LAYER(media, FN_NAV SYMBOL, MEDIA)

/* Base layer
    Finnish stylee, right of L are Ö and Ä; key between . and RSHIFT is -_
    Home row mods, GACS style, plus RALT
    Also some home-ish momentary layer keys for each side
    RET key hold is Fn_Nav layer (tap it with Config key to lock it)
    SPC key hold is Numpad layer, + Config lock
    SYMBOL key hold is Symbols layer, + Config lock
    RCTRL hold is RCTRL, tap is Application key
    BSPC and DEL have hold to add CTRL for word-at-a-time. Quick tap and hold repeats character-at-a-time.
    left shift is sticky on tap, normal on hold
    right shift is CAPSWORD on tap, Shift on hold
 */

#define MTM_LC(K) &mt_medium LC(K) K
#define LS_STICKY &sticky_shift LSHIFT LSHIFT
#define RS_CAPSW &capsword_shift RSHIFT 0
#define HM(L5, L4, L3, L2, L1, L0L, L0K, R0L, R0K, R1, R2, R3, R4, R5) \
    &hml RALT L5 &hml LGUI L4 &hml LALT L3 &hml LCTRL L2 &hml LSHFT L1 &hmlmo L0L L0K \
    &hmrmo R0L R0K &hmr LSHFT R1 &hmr LCTRL R2 &hmr LALT R3 &hmr LGUI R4 &hmr RALT R5

LAYER(Alpha, "Alpha",
    &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    &kp ESC         &kp Q           &kp W           &kp E           &kp R           &hmlmo NUMPAD T                                 &hmrmo NUMPAD Y &kp U           &kp I           &kp O           &kp P           MTM_LC(BSPC)
    HM(TAB,         A,              S,              D,              F,              SYMBOL, G,   /*├───────────────┬───────────────┤*/SYMBOL, H,    J,              K,              L,              FI_OE,          FI_AE)
    LS_STICKY       &kp Z           &kp X           &kp C           &kp V           &hmlmo FN_NAV B &kp F13         &kp F14         &hmrmo FN_NAV N &kp M           &kp COMMA       &kp DOT         &kp FI_MINUS    RS_CAPSW
 /*╰───────────────┴───────────────┤*/&td_config    &kp LGUI        &kp LALT        &kp LCTRL       &lt FN_NAV RET  &lt NUMPAD SPC  &mo SYMBOL      &mt RCTRL K_APP &kp RALT        MTM_LC(DEL)  //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)
// Available RALT keys: Q W R Y U F G H J C V B

/* Alpha Sym-Hold Layer (alternate base layer)
    Experimental: Now I have a repeat key, how about a toggleable layer that puts symbol layer on hold, passing through to the alpha layer on tap?
    Will lose BSPC word...
    Hold-tap with tap trans didn't work, so this has to be kept updated with the Alpha layer...
    No &trans so it can be a default layer if that's fixed
    No Home Row Mods, as hold is in use
*/

#define SA &mt_short // SA because sym goes first

LAYER(AlphaSymHold, "Alpha+Sym",
    &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    SA FI_SECTION ESC SA N1 Q       SA N2 W         SA N3 E         SA N4 R         SA N5 T                                         SA N6 Y         SA N7 U         SA N8 I         SA N9 O         SA N0 P         SA FI_PLUS BSPC
    SA FI_LT TAB    SA EXCL A       SA AT S         SA HASH D       SA FI_CURREN F  SA PRCNT G   /*├───────────────┬───────────────┤*/SA FI_AMPS H  SA FI_SLASH J   SA FI_LPAR K    SA FI_RPAR L    SA FI_EQL FI_OE SA FI_SQT FI_AE
    LS_STICKY       SA FI_PIPE Z    SA FI_AT X      SA FI_GBP C     SA FI_DOLLAR V  SA FI_PERMILLE B &kp F13        &kp F14         SA FI_SL9QM N   SA FI_LBRC M    SA FI_LBKT COMMA SA FI_RBKT DOT SA FI_RBRC FI_MINUS RS_CAPSW
/* ╰───────────────┴───────────────┤*/&td_config    &kp LGUI        &kp LALT        &kp LCTRL       &lt FN_NAV RET  &lt NUMPAD SPC  &mo SYMBOL      &mt RCTRL K_APP &kp RALT        MTM_LC(DEL)  //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Gaming layer
    Most used keys, left hand only
    Leaves modifiers shift, aLt, ctrl but overrides LGUI to overlay GameX layer (don't want WinKey in games anyway)
    Has some free slots: A, Z. Z is explicitly in GameX just where it is on the Alpha layer though... Would have to test in a few games
*/
LAYER(Game, "Game",
    &scroll_up_down,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    ___             &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                          ___             ___             ___             ___             ___             ___
    ___             ___             &kp Q           &kp W           &kp E           &kp R        /*├───────────────┬───────────────┤*/___           ___             ___             ___             ___             ___
    ___             ___             &kp A           &kp S           &kp D           &kp F           &kp ENTER       ___             ___             ___             ___             ___             ___             ___
 /*╰───────────────┴───────────────┤*/___           &mo GAME_X      ___             ___             &kp SPACE       ___             ___             ___             ___             ___          //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Gaming extra layer
    Some more keys used in games
    Maybe should add more
*/
LAYER(GameX, "Game Extra",
    &scroll_up_down,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    &kp FI_SECTION  &kp F1          &kp F2          &kp F3          &kp F4          &kp N6                                          ___             ___             ___             ___             ___             ___
    &kp M           &kp I           &kp J           &kp T           &kp Y           &kp G        /*├───────────────┬───────────────┤*/___           ___             ___             ___             ___             ___
    &kp CAPS        &kp Z           &kp X           &kp C           &kp V           &kp B           ___             ___             ___             ___             ___             ___             ___             ___
 /*╰───────────────┴───────────────┤*/___           ___             ___             ___             ___             ___             ___             ___             ___             ___          //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

// A B C D E F G I J M Q R S T V W X Y Z
// H K L M N O P U

/* Function keys and moving around
    Left hand mouse, right hand navigation
    RET/FN_NAV + SPC/NUMPAD => repeat last key
    RET/FN_NAV + SYMBOL => momentary Media layer
*/
#define MNM(DIR) MOUSE_NUDGE_OR_MOVE(DIR)

LAYER(Fn_Nav, "Fn Nav",
    &scroll_up_down &scroll_left_right,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    ___             &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                          &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &kp F11
    &kp CAPS        &mkp MB5        &mkp LCLK       MNM(MOVE_UP)    &mkp RCLK       &mkp MCLK    /*├───────────────┬───────────────┤*/&kp INSERT    &kp HOME        &kp UP          &kp END         &kp PAGE_UP     &kp F12
    ___             &m_emoji        MNM(MOVE_LEFT)  MNM(MOVE_DOWN)  MNM(MOVE_RIGHT) &mkp MB4        ___             ___             &kp F15         &kp LEFT        &kp DOWN        &kp RIGHT       &kp PAGE_DOWN   ___
 /*╰───────────────┴───────────────┤*/___           ___             ___             ___             ___             &key_repeat     ___             ___             ___             ___          //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Numpad layer
    Rollers are zoom and magnifier with reset on click
    Sends actual numpad keys, not plain number keys
    KP_DOT is used for a comma in Finnish decimals; NUMLOCK_DOT is an actual dot or NUMLOCK on hold
    mini ABCDEF pad for hex; moved FI_EQUAL to G; Calculator on B
    Underscore on Z, RALT on A (RALT is overridden by KP_DOT here)
    TODO make a way to enable AltGr + numpad keys? AltGr is overridden by KP_DOT here...
*/
#define NUMLOCK_DOT &mt KP_NUMLOCK DOT

LAYER(Numpad, "Num Pad",
    &inc_dec_kp LC(FI_PLUS) LC(FI_MINUS) &inc_dec_kp LG(FI_PLUS) LG(FI_MINUS),
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    ___             &kp KP_N1       &kp KP_N2       &kp KP_N3       &kp KP_N4       &kp KP_N5                                       &kp KP_N6       &kp KP_N7       &kp KP_N8       &kp KP_N9       &kp KP_MINUS    ___
    HM(TAB,         FI_LT,          D,              E,              F,             SYMBOL,FI_EQL,/*├───────────────┬───────────────┤*/SYMBOL,PRCNT, KP_N4,          KP_N5,          KP_N6,          KP_PLUS,        KP_DIVIDE)
    ___             &kp FI_UNDER    &kp A           &kp B           &kp C           &kp C_AL_CALC   &reset_zoom     &kp LG(ESC)     &m_caret        &kp KP_N1       &kp KP_N2       &kp KP_N3       &kp KP_ENTER    &kp KP_MULTIPLY
/* ╰───────────────┴───────────────┤*/___           ___             ___             ___             ___             ___             ___             &kp KP_N0       &kp KP_DOT      NUMLOCK_DOT  //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Symbols layer
    Rollers are page up/down and word left/right
    Top row has numbers
    Middle row has Shift+numbers
    Bottom row has AltGr+numbers
    Then other keys where they fit... Tab has <> key, can be AltGr'd for | or use SYMBOL+Z (AltGr+1 doesn't do anything so it's free)
    +?\ key to right of 0 is SYMBOL+BSPC; '* key to left of RET is SYMBOL+Ä
    SYMBOL key will release the layer if it's locked, because it's momentary in the base layer and transparent here (unless NUMPAD is locked on top, then you have to tap it twice)
*/
LAYER(Symbol, "Symbols",
    &inc_dec_kp PG_UP PG_DN &inc_dec_kp LC(LEFT) LC(RIGHT),
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    &kp FI_SECTION  &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                          &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &kp FI_PLUS
    HM(FI_LT,       EXCL,           AT,             HASH,           FI_CUR,         SYMBOL,PRCNT,/*├──────────────┬────────────────┤*/SYMBOL,FI_AMPS,FI_FSLH,       FI_LPAR,        FI_RPAR,        FI_EQL,         FI_SQT)
    ___             &kp FI_PIPE     &kp FI_AT       &kp FI_GBP      &kp FI_DOLLAR   &kp FI_PERMILLE ___             ___             &kp FI_SL9QM    &kp FI_LBRC     &kp FI_LBKT     &kp FI_RBKT     &kp FI_RBRC     ___
/* ╰───────────────┴───────────────┤*/___           ___             ___             ___             ___             ___             ___             ___             ___             ___          //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Media layer
    Rollers are volume and target screen brightness
    Volume controls, playback etc
    Only momentary from FN_NAV + SYMBOL for now
    Romanian letters on A(Ă) U(Â) I(Î) S(Ș) T(Ț)
*/
LAYER(Media, "Media",
    &inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_BRI_INC C_BRI_DEC,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    ___             ___             ___             ___             ___             &ro_tco                                         ___             &ro_aci         &ro_ici         ___             ___             ___
    ___             &ro_abr         &ro_sco         ___             ___             ___          /*├───────────────┬───────────────┤*/___           &kp C_RW        &kp C_STOP      &kp C_FF        ___             ___
    ___             ___             ___             &kp C_VOL_DN    &kp C_MUTE      &kp C_VOL_UP    &kp C_MUTE      &kp C_BRI_MAX   &kp C_REC       &kp C_PREV      &kp C_PP        &kp C_NEXT      ___             ___
/* ╰───────────────┴───────────────┤*/___           ___             ___             ___             ___             ___             ___             ___             ___             ___          //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Sudoku layer
    For using Sven's Sudoku Pad
    Number pad is upside down, using standard number keys; Navigation is on the left side; Various extra keys for mode changes, undo/redo etc.
    I guess I could just turn the numpad upside down in Sudoku Pad, but that's not how I'm used to it... On the other hand, it would be a nice standard-number-key numpad
*/
LAYER(Sudoku, "Sudoku",
    &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    ___             ___             ___             ___             ___             ___                                             &kp LC(Y)       &kp N1          &kp N2          &kp N3          ___             ___
    ___             &kp LC(A)       &kp Z           &kp UP          &kp C           &kp V        /*├───────────────┬───────────────┤*/&kp LC(I)     &kp N4          &kp N5          &kp N6          ___             ___
    ___             &kp LC(Z)       &kp LEFT        &kp DOWN        &kp RIGHT       &kp B           ___             ___             ___             &kp N7          &kp N8          &kp N9          ___             ___
/* ╰───────────────┴───────────────┤*/___           &kp X           ___             ___             ___             ___             ___             &kp N0          &kp KP_DIVIDE   ___          //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Config layer
    Rollers are BLE profile and backlight brightness
    Output toggle BLE/USB
    Bluetooth profile management: 10 profiles; tap to select, hold to disconnect; clear current on long hold on X
    Backlight control: set, toggle, increase, decrease
    Layer toggles: FN_NAV, NUMPAD, SYMBOL, S => SUDOKU, G => GAME
    Default layer setting: N => Alpha, M => Alpha+Sym
    Leader keys: Left on LGUI, Right on DEL (use leader key on side you want to reset/bootloader etc)
    Extra triangle of keys from Finnish keyboard: acute (´`¸˛), A with ring (Å), umlaut(¨^~¯)
    TODO: &df works badly at the moment, it causes a &to whenever the BLE profile is changed. So Config key doesn't stay held down, and profile selection only goes one at a time. For now, using &to for ALPHA and ALPSYM, and removing the module.
*/
#define BTSD(P) &bt_sel_disc P P
#define OUT_BTCLR &h_out_btclr 0 OUT_TOG
#define RESET &h_reset 0 0
#define BOOTLOAD &h_bootloader 0 0
#define BLCS(C, S) &mt_bl_cmd_set S BL_ ## C ## _CMD

#ifdef STRING_INPUT_MODULE
#define STRING_INPUT(NAME, DESC, ACCEPT, CANCEL) ZMK_STRING_INPUT(NAME, ACCEPT, CANCEL, \
    display-name = DESC; \
    accept-list = <RET>; \
    cancel-list = <ESC>; \
    ignore-list = <LSHIFT RSHIFT>; \
)
#else
#define STRING_INPUT(NAME, DESC, ACCEPT, CANCEL) ZMK_MACRO(NAME, display-name = DESC; bindings = <&none>)
#endif

#ifdef STRING_DISPLAY_MODULE
ZMK_STRING_DISPLAY(sd, strings =
    "[BTPN]",
    "Hello, world!";
)
#define SD_STRING_BLE_PROFILE_NAME 0
#define SD_STRING_HELLO_WORLD 1

#define SD &sd
#else
#define SD &m_ignore2
#endif

#define SDSHOW SD SD_SHOW(TOGGLE)
#define SDDISP_BLE_PN SD SD_DISPLAY(SD_STRING_BLE_PROFILE_NAME)
#define SDDISP_HELLO SD SD_DISPLAY(SD_STRING_HELLO_WORLD)
#define SDSTOR_BLE_PN SD SD_STORE(BLE_PROFILE_NAME)

STRING_INPUT(si_ble_pm, "Input string; Accept => store BLE profile name, Cancel => nothing", SDSTOR_BLE_PN, &none)

LAYER(Config, "Config",
    &bt_adjust &bri_adjust,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    OUT_BTCLR       BTSD(0)         BTSD(1)         BTSD(2)         BTSD(3)         BTSD(4)                                         BTSD(5)         BTSD(6)         BTSD(7)         BTSD(8)         BTSD(9)         &kp FI_ACUTE
    ___             &si_ble_pm      &tog SUDOKU     SDDISP_HELLO    SDDISP_BLE_PN   &tog GAME    /*├───────────────┬───────────────┤*/___           &kp PRINTSCREEN &kp SCROLLLOCK  &kp PAUSE_BREAK &kp FI_A_RING   &kp FI_UMLAUT
    ___             SDSHOW          BLCS(OFF, 25)   BLCS(DEC, 50)   BLCS(TOG, 75)   BLCS(INC, 100)  ___             BLCS(TOG, 50)   &to/*df*/ ALPHA &to/*df*/ ALPSYM ___            ___             ___             ___
/* ╰───────────────┴───────────────┤*/___           &leader         ___             ___             &tog FN_NAV     &tog NUMPAD     &tog SYMBOL     ___             ___             &leader      //├───────────────┴───────────────╯
//                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
)

/* Empty layer for copy & paste */
//      &inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT,
//  // ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                               ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
//      ___             ___             ___             ___             ___             ___                                             ___             ___             ___             ___             ___             ___
//      ___             ___             ___             ___             ___             ___          /*├───────────────┬───────────────┤*/___           ___             ___             ___             ___             ___
//      ___             ___             ___             ___             ___             ___             ___             ___             ___             ___             ___             ___             ___             ___
//  /* ╰───────────────┴───────────────┤*/___           ___             ___             ___             ___             ___             ___             ___             ___             ___          //├───────────────┴───────────────╯
//  //                                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
